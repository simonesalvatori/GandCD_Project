swirl()
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,myMatrix)
myData <- data.frame(patients,myMatrix)
myData
class(myData)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData)<-cnames
myData
directory<-c("E:\_Progetto 14  Coursera\Data Science\R Programming\Programming Assignment 1 Air Pollution Instructions\rprog_data_specdata\specdata")
directory<-c("E:\rprog_data_specdata\specdata")
directory<-c("E:\\rprog_data_specdata\\specdata")
directory
directory<-c("E:/rprog_data_specdata/specdata")
directory
filist <- list.files(path = directory)
filist
dataFiles <- lapply(Sys.glob("E:/rprog_data_specdata/specdata/{3}.csv"), read.csv)
dataFiles
class(dataFiles)
dataFiles[1]
dataFiles[2]
dataFiles <- lapply(Sys.glob("E:/rprog_data_specdata/specdata/001.csv"), read.csv)
dataFiles
dataFiles[1]
dataFiles[2]
dataFiles <- lapply("E:/rprog_data_specdata/specdata/{3}.csv", read.csv)
dataFiles <- lapply(paste("E:/rprog_data_specdata/specdata/","{3}.csv"), read.csv)
dataFiles <- lapply(paste("E:/rprog_data_specdata/specdata/","*.csv", collapse=""), read.csv)
tline <- "E:/rprog_data_specdata/specdata/"+ "{3}.csv"
dataFiles <- lapply(*.csv", read.csv)
dataFiles <- lapply("*.csv", read.csv)
filist
filist <- paste0("E:/rprog_data_specdata/specdata/",filist)
filist
filist
dataFiles <- lapply(filist, read.csv)
dataFiles
head(dataFiles)
colnames(dataFiles)
dataFiles <- lapply(filist, read.csv,header = TRUE)
dataFiles
colnames(dataFiles)
rownames(dataFiles)
head(dataFiles)
id <- 1:332
dataFiles[dataFiles[,2] %in% id]
colnames(dataFiles)<- c("Date","sulfate","nitrate","ID")
class(dataFiles)
dataFiles <- lapply(filist, read.table,header = TRUE)
class(dataFiles)
dataFiles
dataFiles[3]
dataFiles1<-dataFiles[dataFiles[1] %in% id]
dataFiles1
dataFiles[1]
dataFiles1
dataFiles1<-dataFiles[dataFiles[1] %in% 1]
dataFiles1
list()
do.call(rbind,dataFiles)
class(dataFiles)
dataFiles
write.csv(dataFiles, file = "E:\_Progetto 14  Coursera\Data Science\R Programming\Programming Assignment 1 Air Pollution Instructions\rprog_data_specdata\specdata-test.csv" )
write.csv(dataFiles, file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test.csv" )
write.csv(dataFiles[1], file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test.csv" )
myMatrx <- rbindlist(dataFiles)
library(data.table)
myMatrx <- do.call(rbind, lapply(dataFiles, function(x) data.frame(as.list(x))))
write.csv(myMatrx, file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test-rbind.csv" )
myMatrx <- do.call(rbind, lapply(dataFiles))
library(gtools)
myMatrx <- do.call(rbind, lapply(dataFiles, function(x)))
myMatrx <- do.call(rbind, lapply(dataFiles, function(x) data.frame(as.list(x))))
myMatrx <- do.call(rbind, lapply(dataFiles, function(x) read.table(file=x)))
myMatrx <- do.call(rbind, dataFiles)
write.csv(myMatrx, file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test-rbind.csv" )
dataFiles <- lapply(filist, read.csv)
write.csv(dataFiles[1], file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test.csv" )
myMatrx <- do.call(rbind, dataFiles)
write.csv(myMatrx, file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test-rbind.csv" )
myMatrx <- do.call(rbind, dataFiles[,2,3,4,5])
myMatrx <- do.call(rbind, dataFiles[,4])
myMatrx <- do.call(rbind, dataFiles[,2])
myMatrx <- do.call(rbind, dataFiles[])
write.csv(myMatrx, file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test-rbind.csv" )
id
myMatrx[myMatrx %in% 3]
class(myMatrx)
colnames(myMatrx)
myMatrx[myMatrx$ID ==id]
id
id<-331
myMatrx[myMatrx$ID ==id]
myMatrx[myMatrx$ID <=id]
myMatrx[myMatrx[4] <=id]
myMatrx[myMatrx[4] ==id]
myMatrx <- do.call(rbind, dataFiles)
myMatrx[ID == 331]
myMatrx2<-myMatrx[myMatrx$ID == 331]
colnames(myMatrx)
myMatrx2<-myMatrx[myMatrx$nitrate == 331]
myMatrx2<-myMatrx[myMatrx[5] == 331]
myMatrx2<-myMatrx[myMatrx[4] == 331]
myMatrx2
myMatrx2<-myMatrx[myMatrx[,4] == 331]
myMatrx2
write.csv(myMatrx2, file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test-rbind-mx2.csv" )
myMatrx2<-myMatrx[myMatrx$ID == 331,]
write.csv(myMatrx2, file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test-rbind-mx2.csv" )
myMatrx2<-myMatrx[myMatrx$ID == 331,2:5]
myMatrx2<-myMatrx[myMatrx$ID == 331,1:4]
write.csv(myMatrx2, file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test-rbind-mx2.csv" )
myMatrx2<-myMatrx[myMatrx$ID == 331,2:4]
write.csv(myMatrx2, file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test-rbind-mx2.csv" )
myMatrx2<-myMatrx[myMatrx$ID == 331,4]
write.csv(myMatrx2, file = "E:/_Progetto 14  Coursera/Data Science/R Programming/Programming Assignment 1 Air Pollution Instructions/rprog_data_specdata/specdata-test-rbind-mx2.csv" )
myMatrx2[4]
myMatrx2
myMatrx2<-myMatrx[myMatrx$ID == 331,]
myMatrx2[4]
myMatrx2[3]
myMatrx2[nitrate]
myMatrx2["nitrate""]
s
asf
myMatrx2
b <- cbind(seq_along(pollutant), match(pollutant, colnames(myMatrx2)))
b <- cbind(seq_along("nitrate"), match("nitrate", colnames(myMatrx2)))
myMatrx3 <- myMatrx2[b]
myMatrx3
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
x
y <- if(x < 3) {
NA
} else {
10
}
y
3L
library(datasets)
data(iris)
?iris
iris
data1 <- iris[Species == "virginica"]
data1 <- iris['Species' == "virginica"]
data1
data1 <- subset(iris,Species == "virginica")
data1
colMeans(data1)
colMeans(data1[,1:5])
colMeans(data1[,1:4])
apply(iris[,1:4],2,mean)
apply(data1[,1:4],2,mean)
apply(data1[,1:4],1,mean)
q1 <- read.csv("E:\\_Progetto 14  Coursera\\Data Science\\Getting and Cleaning Data\\Week 1 Quiz\\getdata_data_ss06hid.csv")
q1
q2 <- subset(q1, VAL == 24)
q2
q2
write.csv("E:\\_Progetto 14  Coursera\\Data Science\\Getting and Cleaning Data\\Week 1 Quiz\\getdata_data_ss06hid-output.csv")
write.csv(q2,"E:\\_Progetto 14  Coursera\\Data Science\\Getting and Cleaning Data\\Week 1 Quiz\\getdata_data_ss06hid-output.csv")
q2 <- subset(q1[,36:40], VAL == 24)
q2
write.csv(q2,"E:\\_Progetto 14  Coursera\\Data Science\\Getting and Cleaning Data\\Week 1 Quiz\\getdata_data_ss06hid-output.csv")
library(xsls)
library(xlsx)
install.packages(c(xlsx))
install.packages(xlsx)
install.packages()
install.packages(xlsx)
install.packages("xlsx")
xl1 <- read.xlsx("E:\\_Progetto 14  Coursera\\Data Science\\Getting and Cleaning Data\\Week 1 Quiz\\ggetdata_data_DATA.gov_NGAP.xlsx", 0, startrow=18, endrow=23,colIndex=7:15)
library(xlsx)
xl1 <- read.xlsx("E:\\_Progetto 14  Coursera\\Data Science\\Getting and Cleaning Data\\Week 1 Quiz\\ggetdata_data_DATA.gov_NGAP.xlsx", 0, startrow=18, endrow=23,colIndex=7:15)
xl1 <- read.xlsx("E:\\ggetdata_data_DATA.gov_NGAP.xlsx", 0, startrow=18, endrow=23,colIndex=7:15)
xl1 <- read.xlsx("E:\\_Progetto 14  Coursera\\Data Science\\Getting and Cleaning Data\\Week 1 Quiz\\getdata_data_DATA.gov_NGAP.xlsx", 0, startrow=18, endrow=23,colIndex=7:15)
xl1 <- read.xlsx("E:\\_Progetto 14  Coursera\\Data Science\\Getting and Cleaning Data\\Week 1 Quiz\\getdata_data_DATA.gov_NGAP.xlsx", 1, startrow=18, endrow=23,colIndex=7:15)
xl1
dat <- read.xlsx("E:\\_Progetto 14  Coursera\\Data Science\\Getting and Cleaning Data\\Week 1 Quiz\\getdata_data_DATA.gov_NGAP.xlsx", 1, startrow=18, endrow=23,colIndex=7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
library(xml)
install.packages("xml")
install.packages("XML")
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
docData <- xmlTreeParse(fileUrl, useInternal-TRUE)
docData <- xmlTreeParse(fileUrl, useInternal=TRUE)
docData <- xmlTreeParse(fileUrl, useInternal=FALSE)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
docData <- xmlTreeParse(fileUrl, useInternal=FALSE)
docData
rootNode <- xmlRoot(docData)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSapply(rootNode,xmlValue)
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
docData <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <- xmlRoot(docData)
rootNode[[1]][[1]]
xpathSApply(rootNode,"//zipcode",xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue == "21231")
xpathSApply(rootNode,"21231")
xpathSApply(rootNode,"//zipcode",xmlValue)
zipc<-xpathSApply(rootNode,"//zipcode",xmlValue)
zipc
zipc1 <- zipc[zipc=="21231"]
zipc1
?fread
?fread()
install.packages("data.table")
library("data.table")
DT <- fread(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv)
DT <- fread(http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"","E:\\"" )
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","E:\\"" )
internal
method=internal
download
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","E:\\", "auto" )
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","E:\\data.csv", "auto" )
library("data.table")
DT <- fread("E:\\data.csv")
DT
tapply(DT$pwgtp15,DT$SEX,mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
rowMeans(DT)[DT$SEX==1]
rowMeans(DT)[DT$SEX==2]
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT[,mean(pwgtp15),by=SEX]
mean(DT[DT$SEX==1,]$pwgtp15)
mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
rnorm?
()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1
x1<-2
x2<-3
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
y<-0
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
system.time(fit <- lm(y ~ x1 + x2))
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
summaryRprof()
Rprof(NULL)
summaryRprof()
summaryRprof
library(data.table)
library("data.table")
install.package(data.table)
install.packages(data.table)
install.packages('data.table')
library("data.table")
install.packages(c("Rcpp", "rbenchmark", "inline", "Runit"))
install.packages('Runit')
install.packages('RUnit')
library(Rcpp)
library(inline)
library(Rcpp)
library(data.table)
install.packages(Rcpp)
install.packages("Rcpp")
library(data.table)
install.packages("plyr")
library(data.table)
install.packages("reshape2")
library(data.table)
install.packages('knitr')
r
version()
R.version()
checkRVersion(quiet = FALSE)
sessionInfo()
install.packages(“RMySQL”, type = “source”)
install.packages(RMySQL, type = “source”)
install.packages(RMySQL, type = source)
install.packages("RMySQL", type = "source")
Sys.getenv('MYSQL_HOME')
install.packages("RMySQL", type = "source")
Sys.getenv('MYSQL_HOME')
Sys.getenv('MYSQL_HOME')
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
Sys.getenv()
install.packages("RMySQL", type = "source")
sqldf()
library(sqldf)
install.packages(sqldf)
install.packages("sqldf")
sqldf()
library(sqldf)
setwd("E:/_Progetto 14  Coursera/Data Science/Getting and Cleaning Data/Getting and Cleaning Data Course Project/GandCD_Project")
x_test <-read.table('./UCI HAR Dataset/test/X_test.txt') # main dataset dim() 7352X561
y_test <-read.table('./UCI HAR Dataset/test/y_test.txt') # additional column dim() 7352X1 adding the activity-labels 1 to 6
subject_test <-read.table('./UCI HAR Dataset/test/subject_test.txt') # additional column dim() 7352X1 adding the subject 1 to 30
x_train <-read.table('./UCI HAR Dataset/train/X_train.txt')
y_train <-read.table('./UCI HAR Dataset/train/y_train.txt')
subject_train <-read.table('./UCI HAR Dataset/train/subject_train.txt')
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt") # table mapping activity id to activity names
features <- read.table("./UCI HAR Dataset/features.txt") #list of colnames for the dataset
## 1.b merge the two datasets and add the column names
x_data <- rbind(x_test, x_train)
colnames(x_data) <- features[,2]
y_data <- rbind(y_test, y_train)
colnames(y_data) <- 'Activity'
subject_data <- rbind(subject_test, subject_train)
colnames(subject_data) <- 'Subject'
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
## 2.a Select the columns with '-mean()' or '-std()', based on the description in 'features_info.txt'
ms_cols <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
x_data_ms <- x_data[, ms_cols]
# 3. Uses descriptive activity names to name the activities in the data set
## 3.a add the two additional columns Activity and Subject to the data frame
x_data_ms <- cbind(x_data_ms, subject_data, y_data)
## 3.b change the activity labels to lowercase and swap the numeric id in the data frame with the descriptive labels
activity_labels[,2] = gsub("_", "", tolower(as.character(activity_labels[, 2])))
## we can use activity_labels' row index instead of activity_labels$V1 because they concide
x_data_ms[,'Activity'] <- activity_labels[x_data_ms[,'Activity'], 2]
# 4. Appropriately labels the data set with descriptive activity names.
## I.E. Appropriately labels the data set with descriptive variable names.
## we follow the tidy data guidelines, thus using descriptive names, no spaces, no dash etc.
vlabels <- colnames(x_data_ms)
#expand_labels <- data.frame(c('t', 'f', 'Body', 'Gravity', 'Acc', 'Gyro', 'Jerk', 'Mag'),c('time', 'frequency', 'Body', 'Gravity', 'Acceleration',  ))
# tidy labels
vlabels <- gsub('^t','Time',vlabels)
vlabels <- gsub('^f','Freq',vlabels)
vlabels <- gsub('Acc','Accelerration',vlabels)
vlabels <- gsub('Mag','Magnitude',vlabels)
vlabels <- gsub('Gyro','Gyroscopic',vlabels)
vlabels <- gsub('\\(\\)','', vlabels)
vlabels <- gsub('-','', vlabels)
vlabels <- gsub('mean','Mean', vlabels)
vlabels <- gsub('std','StDev', vlabels)
colnames(x_data_ms) <- vlabels
# 5. Creates a second, independent tidy data set with the average of each variable f or each activity and each subject.
# you want a run_analysis R script, a ReadMe markdown document, a Codebook markdown document, and a tidy data text file
x_data_avg <- aggregate(x_data_ms, by = list(Activity = x_data_ms$Activity, Subject=x_data_ms$Subject), FUN = "mean")
# drop last two columns
x_data_avg <- x_data_avg[,-ncol(x_data_avg)]
x_data_avg <- x_data_avg[,-ncol(x_data_avg)]
write.table(x_data_avg, 'tidy_data_set2.txt', sep = "\t", row.names = FALSE)
dim(x_data_avg)
colnames(x_data_avg)
write(colnames(x_data_avg), 'var_names.txt')
write(colnames(x_data_avg), 'var_names.txt')
write.table(x_data_avg, 'tidy_data_set2.txt', sep = "\t", row.names = FALSE)
write.table(x_data_avg, 'tidy_data_set.txt', sep = "\t", row.names = FALSE)
Rscript
write.table(x_data_avg, 'tidy_data_set.txt', sep = "\t", row.names = FALSE)
write.table(x_data_avg, 'tidy_data_set.txt', sep = "\t", row.names = FALSE)
#######################################################################################################################
# 1. Merges the training and the test sets to create one data set.
## 1.a read the data sets, var names and activity labels
x_test <-read.table('./UCI HAR Dataset/test/X_test.txt') # main dataset dim() 7352X561
y_test <-read.table('./UCI HAR Dataset/test/y_test.txt') # additional column dim() 7352X1 adding the activity-labels 1 to 6
subject_test <-read.table('./UCI HAR Dataset/test/subject_test.txt') # additional column dim() 7352X1 adding the subject 1 to 30
x_train <-read.table('./UCI HAR Dataset/train/X_train.txt')
y_train <-read.table('./UCI HAR Dataset/train/y_train.txt')
subject_train <-read.table('./UCI HAR Dataset/train/subject_train.txt')
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt") # table mapping activity id to activity names
features <- read.table("./UCI HAR Dataset/features.txt") #list of colnames for the dataset
## 1.b merge the two datasets and add the column names
x_data <- rbind(x_test, x_train)
colnames(x_data) <- features[,2]
y_data <- rbind(y_test, y_train)
colnames(y_data) <- 'Activity'
subject_data <- rbind(subject_test, subject_train)
colnames(subject_data) <- 'Subject'
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
## 2.a Select the columns with '-mean()' or '-std()', based on the description in 'features_info.txt'
ms_cols <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
x_data_ms <- x_data[, ms_cols]
# 3. Uses descriptive activity names to name the activities in the data set
## 3.a add the two additional columns Activity and Subject to the data frame
x_data_ms <- cbind(x_data_ms, subject_data, y_data)
## 3.b change the activity labels to lowercase and swap the numeric id in the data frame with the descriptive labels
activity_labels[,2] = gsub("_", "", tolower(as.character(activity_labels[, 2])))
## we can use activity_labels' row index instead of activity_labels$V1 because they concide
x_data_ms[,'Activity'] <- activity_labels[x_data_ms[,'Activity'], 2]
# 4. Appropriately labels the data set with descriptive activity names.
## I.E. Appropriately labels the data set with descriptive variable names.
## we follow the tidy data guidelines, thus using descriptive names, no spaces, no dash etc.
vlabels <- colnames(x_data_ms)
#expand_labels <- data.frame(c('t', 'f', 'Body', 'Gravity', 'Acc', 'Gyro', 'Jerk', 'Mag'),c('time', 'frequency', 'Body', 'Gravity', 'Acceleration',  ))
# tidy labels
vlabels <- gsub('^t','Time',vlabels)
vlabels <- gsub('^f','Freq',vlabels)
vlabels <- gsub('Acc','Acceleration',vlabels)
vlabels <- gsub('Mag','Magnitude',vlabels)
vlabels <- gsub('Gyro','Gyroscopic',vlabels)
vlabels <- gsub('\\(\\)','', vlabels)
vlabels <- gsub('-','', vlabels)
vlabels <- gsub('mean','Mean', vlabels)
vlabels <- gsub('std','StDev', vlabels)
colnames(x_data_ms) <- vlabels
# 5. Creates a second, independent tidy data set with the average of each variable f or each activity and each subject.
# you want a run_analysis R script, a ReadMe markdown document, a Codebook markdown document, and a tidy data text file
x_data_avg <- aggregate(x_data_ms, by = list(Activity = x_data_ms$Activity, Subject=x_data_ms$Subject), FUN = "mean")
# drop last two columns
x_data_avg <- x_data_avg[,-ncol(x_data_avg)]
x_data_avg <- x_data_avg[,-ncol(x_data_avg)]
write.table(x_data_avg, 'tidy_data_set.txt', sep = "\t", row.names = FALSE)
write(colnames(x_data_avg), 'var_names.txt')
## 1.a read the data sets, var names and activity labels
x_test <-read.table('./UCI HAR Dataset/test/X_test.txt') # main dataset dim() 7352X561
y_test <-read.table('./UCI HAR Dataset/test/y_test.txt') # additional column dim() 7352X1 adding the activity-labels 1 to 6
subject_test <-read.table('./UCI HAR Dataset/test/subject_test.txt') # additional column dim() 7352X1 adding the subject 1 to 30
x_train <-read.table('./UCI HAR Dataset/train/X_train.txt')
y_train <-read.table('./UCI HAR Dataset/train/y_train.txt')
subject_train <-read.table('./UCI HAR Dataset/train/subject_train.txt')
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt") # table mapping activity id to activity names
features <- read.table("./UCI HAR Dataset/features.txt") #list of colnames for the dataset
## 1.b merge the two datasets and add the column names
x_data <- rbind(x_test, x_train)
colnames(x_data) <- features[,2]
y_data <- rbind(y_test, y_train)
colnames(y_data) <- 'Activity'
subject_data <- rbind(subject_test, subject_train)
colnames(subject_data) <- 'Subject'
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
## 2.a Select the columns with '-mean()' or '-std()', based on the description in 'features_info.txt'
ms_cols <- grep("-mean\\(\\)|-std\\(\\)", features[, 2])
x_data_ms <- x_data[, ms_cols]
# 3. Uses descriptive activity names to name the activities in the data set
## 3.a add the two additional columns Activity and Subject to the data frame
x_data_ms <- cbind(x_data_ms, subject_data, y_data)
## 3.b change the activity labels to lowercase and swap the numeric id in the data frame with the descriptive labels
activity_labels[,2] = gsub("_", "", tolower(as.character(activity_labels[, 2])))
## we can use activity_labels' row index instead of activity_labels$V1 because they concide
x_data_ms[,'Activity'] <- activity_labels[x_data_ms[,'Activity'], 2]
# 4. Appropriately labels the data set with descriptive activity names.
## I.E. Appropriately labels the data set with descriptive variable names.
## we follow the tidy data guidelines, thus using descriptive names, no spaces, no dash etc.
vlabels <- colnames(x_data_ms)
#expand_labels <- data.frame(c('t', 'f', 'Body', 'Gravity', 'Acc', 'Gyro', 'Jerk', 'Mag'),c('time', 'frequency', 'Body', 'Gravity', 'Acceleration',  ))
# tidy labels
vlabels <- gsub('^t','Time',vlabels)
vlabels <- gsub('^f','Freq',vlabels)
vlabels <- gsub('Acc','Acceleration',vlabels)
vlabels <- gsub('Mag','Magnitude',vlabels)
vlabels <- gsub('Gyro','Gyroscopic',vlabels)
vlabels <- gsub('BodyBody','Body',vlabels)
vlabels <- gsub('\\(\\)','', vlabels)
vlabels <- gsub('-','', vlabels)
vlabels <- gsub('mean','Mean', vlabels)
vlabels <- gsub('std','StDev', vlabels)
colnames(x_data_ms) <- vlabels
# 5. Creates a second, independent tidy data set with the average of each variable f or each activity and each subject.
# you want a run_analysis R script, a ReadMe markdown document, a Codebook markdown document, and a tidy data text file
x_data_avg <- aggregate(x_data_ms, by = list(Activity = x_data_ms$Activity, Subject=x_data_ms$Subject), FUN = "mean")
# drop last two columns
x_data_avg <- x_data_avg[,-ncol(x_data_avg)]
x_data_avg <- x_data_avg[,-ncol(x_data_avg)]
write.table(x_data_avg, 'tidy_data_set.txt', sep = "\t", row.names = FALSE)
write(colnames(x_data_avg), 'var_names.txt')
write(activity_labels[,2], 'activity_names.txt')
